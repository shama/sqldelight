import org.jetbrains.grammarkit.tasks.GenerateParser
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
  apply from: "$rootDir/gradle/dependencies.gradle"

  repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
    maven {
      url 'https://jitpack.io'
    }
  }

  dependencies {
    classpath deps.plugins.kotlin
    classpath deps.plugins.dokka
    classpath deps.plugins.intellij
    classpath deps.plugins.android
    classpath deps.plugins.grammarKit
    classpath deps.plugins.grammarKitComposer
    classpath deps.plugins.publish
    classpath deps.plugins.spotless
    classpath deps.plugins.changelog
    classpath deps.plugins.shadow
  }
}

apply plugin: "com.diffplug.spotless"

apply from: "$rootDir/gradle/dependencies.gradle"

spotless {
  kotlin {
    target "**/*.kt"
    targetExclude "**/gen/**/*.*", "**/generated/**/*.*", "sqldelight-compiler/integration-tests/src/test/kotlin/com/example/**/*.*", "sqldelight-compiler/src/test/migration-interface-fixtures/**/*.*"
    ktlint(versions.ktlint).userData(["indent_size": "2"])
    trimTrailingWhitespace()
    endWithNewline()
  }
}

allprojects {
  repositories {
    mavenCentral()
    google()
    maven { url 'https://www.jetbrains.com/intellij-repository/releases' }
    maven { url "https://cache-redirector.jetbrains.com/intellij-dependencies" }
    maven {
      url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
  }

  tasks.withType(Test).configureEach {
    testLogging {
      events = ["failed", "skipped", "passed"]
      exceptionFormat "full"
    }
  }

  tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
  }

  tasks.withType(KotlinCompile) {
    kotlinOptions {
      // apiVersion must target Kotlin stdlib version bundled with the lowest supported IntelliJ version to avoid
      // runtime errors. https://plugins.jetbrains.com/docs/intellij/kotlin.html#kotlin-standard-library
      apiVersion = "1.3"
    }
  }

  configurations {
    grammar.extendsFrom compileOnly
  }

  dependencies {
    grammar deps.intellij.indexing
    grammar deps.intellij.analysisImpl
    grammar deps.intellij.asm
  }

  tasks.withType(GenerateParser).configureEach {
    classpath = configurations.grammar
  }

  configurations.all {
    exclude group: 'com.jetbrains.rd'
    exclude group: 'com.github.jetbrains', module: 'jetCheck'
  }

  group = GROUP
  version = VERSION_NAME
}
